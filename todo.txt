(Done)* Frontend should be able to receive events just like the plugins. Therefore it must be possible to register callbacks dynamically.
(Done)* Implement network database/channel registry
(Done) * Add native functions to query about network database info
(Done) * Add functionality for unloading plugins (experimental; what happens if the plugin is executing code while it is unloaded..?)
(Done) * What happens if the plugin has registered a callback? Then that callback must be removed when the plugin is unloaded.

(Done (actually decided not to use it, but it works great!))* Add worker threads and a task/job queue system for executing plugins (and maybe other stuff so make it flexible?).
(Done) * Plugin unloading: event handler list is changed while in use.
	|-* Entries for plugin being unloaded must be marked as unloaded but not removed.
	|-* Removal of the entry in the list must be done when an unloaded entry is encountered. 			Then the iteration can proceed from the correct index.

(Done) * Refactor callback handling to minimize code duplication and simplify adding of new callbacks.

* Prevent multiple Plugin objects from being created using the same shared library handle.

(Done) * Introduce api functions to unregister callbacks too, and make the plugins responsible for cleaning up after themselves.

(Won't fix) * Write a parser for the numeric reply 005 (RPL_BOUNCE acc to rfc, but seems to be used as RPL_ISUPPORT by all irc servers nowadays) and store info in cache

(Done) * Perhaps look over the network cache code and adjust it to be more like the rest of the project.

(Done) * Refactor message parsing

(Done) * Add handlers for more irc events than join and privmsg.

(Done) * Add antiflood mechanism (output queue + monitor)

* Assertions: Add NDEBUG preprocessor definition for releasebuilds!

- read up on getaddrinfo() and make sure the error checking in the connect function is sufficient and covers all possible errors.
(Done) - raii: PluginManager
(Done) - maybe rename NetworkManager -> irc session something? UPDATE: went with 'Network'
(Done) - maybe rename INetworkManagerFrontend -> INetworkManager UPDATE: went with 'INetwork'
(Done) - maybe get rid of "Core" ? At least rename it?
	- only exists for the purpose of tying NetworkManagers and PluginManager together.
(Done) - create a wrapper for dlopen/dlclose/dlsym/dlerror and use in plugin class to be raii
* Move tcpconnection to pfindep, separate implementation from interface
* Remove frontend_console_cpp
* Remove test_threading or move it to anp_common as a unit test there
* Remove test_parsing
* Add anpcode.git as submodule


Finalize:
* Remove all memory leaks (valgrind..?)
* Find all "ETODO" notes and fix.
* Go through doxygen todo list.
* Look through documentation.

Done.
